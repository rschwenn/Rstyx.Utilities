<Window x:Class="MainWindow"
    Title="MainWindow" 
    Background="WhiteSmoke"
    
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    
    xmlns:Cinch="clr-namespace:Cinch;assembly=Cinch.WPF"
    xmlns:Logging="clr-namespace:Rstyx.LoggingConsole;assembly=Rstyx.LoggingConsole"
    xmlns:RstyxPush="clr-namespace:Rstyx.Utilities.UI.Binding.PushBinding;assembly=Rstyx.Utilities"
    xmlns:RstyxUtils="clr-namespace:Rstyx.Utilities;assembly=Rstyx.Utilities"
    xmlns:RstyxUtilsApps="clr-namespace:Rstyx.Utilities.Apps;assembly=Rstyx.Utilities"
    xmlns:RstyxControls="clr-namespace:Rstyx.Utilities.UI.Controls;assembly=Rstyx.Utilities"
    xmlns:RstyxConverters="clr-namespace:Rstyx.Utilities.UI.Binding.Converters;assembly=Rstyx.Utilities"
    xmlns:RstyxResources="clr-namespace:Rstyx.Utilities.UI.Resources;assembly=Rstyx.Utilities"
    xmlns:global="clr-namespace:Rstyx.Utilities.TestWpf;assembly="
    
    mc:Ignorable="d"
    d:DesignHeight="500" d:DesignWidth="500"
    
    Height="{Binding Source={x:Static global:MySettings.Default}, Path=WindowHeight, Mode=TwoWay}"
    Width ="{Binding Source={x:Static global:MySettings.Default}, Path=WindowWidth,  Mode=TwoWay}"
    Top   ="{Binding Source={x:Static global:MySettings.Default}, Path=WindowTop,    Mode=TwoWay}"
    Left  ="{Binding Source={x:Static global:MySettings.Default}, Path=WindowLeft,   Mode=TwoWay}"
    
    UseLayoutRounding="True"
    >
    
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Rstyx.Utilities;component/source/UI/Resources/IconResources.xaml" />
                <!--<ResourceDictionary Source="/PresentationFramework.Luna, Version=4.0.30319.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35, ProcessorArchitecture=MSIL;component/themes/Luna.Metallic.xaml" />-->
            </ResourceDictionary.MergedDictionaries>
            
            <DrawingBrush x:Key="EllipsenBrush" >
              <DrawingBrush.Drawing>
                <GeometryDrawing Brush="MediumBlue">
                  <GeometryDrawing.Geometry>
                    <GeometryGroup>
                      <EllipseGeometry RadiusX="200" RadiusY="400" Center="0,0" />
                      <EllipseGeometry RadiusX="400" RadiusY="200" Center="0,0" />
                    </GeometryGroup>
                  </GeometryDrawing.Geometry>
                  <GeometryDrawing.Pen>
                    <Pen Thickness="50">
                      <Pen.Brush>
                        <LinearGradientBrush>
                          <GradientStop Offset="0.0" Color="Black" />
                          <GradientStop Offset="1.0" Color="Gray" />
                        </LinearGradientBrush>
                      </Pen.Brush>
                    </Pen>
                  </GeometryDrawing.Pen>
                </GeometryDrawing>
              </DrawingBrush.Drawing>
            </DrawingBrush>
            
            <!--<Style TargetType="{x:Type Button}">
                <Setter Property="Opacity"  Value="1.0" />
                <Setter Property="Padding"  Value="3"   />
                <Setter Property="Margin"   Value="4"   />
                <Setter Property="MaxWidth" Value="120" />
                
                <Style.Triggers>
                    <DataTrigger Value="False" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}">
                        <Setter Property="Opacity" Value="0.4" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>-->
            
            <!-- TabItem Header: Binding LogLevelEnum Name to Tab Header Caption -->
            <!--<DataTemplate x:Key="IconHeaderTemplate">
                <TextBlock Text="{Binding}" TextAlignment="Center" Margin="0,0,0,2" />
            </DataTemplate>-->
            
            <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Type ProgressBar}}" >
                <Setter Property="Visibility" Value="Visible" />
                <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />-->
                
                <Style.Triggers>
                    <!-- If value=0: Hide the progress bar. -->
                    <Trigger Property="Value" Value="0">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    
                    <!-- If value=100: Set foreground color to gray after a delay. -->
                    <Trigger Property="Value" Value="100">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            
            <ControlTemplate x:Key="SimpleExpanderButtonTemp" TargetType="{x:Type ToggleButton}">
                <Border x:Name="ExpanderButtonBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        >
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle Fill="Transparent"
                                   Grid.ColumnSpan="2"/>
                        <Ellipse Name="Circle"
                             Grid.Column="0"
                             Stroke="DarkGray"
                             Width="20"
                             Height="20"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center"
                             />
                        <Path x:Name="Sign"
                          Grid.Column="0"
                          Data="M 0,5 H 10 M 5,0 V 10 Z"
                          Stroke="#FF666666"
                          Width="10"
                          Height="10"
                          StrokeThickness="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          RenderTransformOrigin="0.5,0.5"
                          >
                            <Path.RenderTransform>
                                <RotateTransform Angle="0"/>
                            </Path.RenderTransform>
                        </Path>
                        <ContentPresenter x:Name="HeaderContent"
                                      Grid.Column="1"
                                      Margin="4,0,0,0"
                                      ContentSource="Content"/>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <!--Change the sign to minus when toggled-->
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Data" TargetName="Sign" Value="M 0,5 H 10 Z"/>
                    </Trigger>
                    
                    <!-- MouseOver, Pressed behaviours-->
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Stroke" Value="#FF3C7FB1" TargetName="Circle"/>
                        <Setter Property="Stroke" Value="#222" TargetName="Sign"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Stroke" Value="#FF526C7B" TargetName="Circle"/>
                        <Setter Property="StrokeThickness" Value="1.5" TargetName="Circle"/>
                        <Setter Property="Stroke" Value="#FF003366" TargetName="Sign"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            
            <Style x:Key="ToggleButtonStyle_2" TargetType="{x:Type ToggleButton}">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Padding"
                        Value="2"/>
                <Setter Property="BorderThickness"
                        Value="1"/>
                <Setter Property="Background"
                        Value="Transparent"/>
                <Setter Property="BorderBrush"
                        Value="Transparent"/>
                <Setter Property="HorizontalAlignment"
                        Value="Center"/>
                <Setter Property="VerticalAlignment"
                        Value="Center"/>
                <Setter Property="HorizontalContentAlignment"
                        Value="Center"/>
                <Setter Property="VerticalContentAlignment"
                        Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    >
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked"
                                         Value="true">
                                    <Setter Property="BorderBrush"
                                            Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                                    <Setter Property="Background"
                                            Value="{DynamicResource ToolBarButtonChecked}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver"
                                         Value="true">
                                    <Setter Property="BorderBrush"
                                            Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                                    <Setter Property="Background"
                                            Value="{DynamicResource ToolBarButtonHover}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused"
                                         Value="true">
                                    <Setter Property="BorderBrush"
                                            Value="{DynamicResource ToolBarButtonHoverBorder}"/>
                                    <Setter Property="Background"
                                            Value="{DynamicResource ToolBarButtonHover}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver"
                                                   Value="true"/>
                                        <Condition Property="IsChecked"
                                                   Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="BorderBrush"
                                            Value="{DynamicResource ToolBarButtonPressedBorder}"/>
                                    <Setter Property="Background"
                                            Value="{DynamicResource ToolBarButtonPressed}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsKeyboardFocused"
                                                   Value="true"/>
                                        <Condition Property="IsChecked"
                                                   Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="BorderBrush"
                                            Value="{DynamicResource ToolBarButtonPressedBorder}"/>
                                    <Setter Property="Background"
                                            Value="{DynamicResource ToolBarButtonPressed}"/>
                                </MultiTrigger>
                                <Trigger Property="IsPressed"
                                         Value="true">
                                    <Setter Property="BorderBrush"
                                            Value="{DynamicResource ToolBarButtonPressedBorder}"/>
                                    <Setter Property="Background"
                                            Value="{DynamicResource ToolBarButtonPressed}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                         Value="false">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
        </ResourceDictionary>
    </Window.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="90" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="265*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        
        <!-- Test Buttons -->
        <DockPanel  Grid.Row="0" Margin="5" LastChildFill="True">
            <Button Name="Button1" Margin="6" Padding="5" Height="40" Width="110"
                DockPanel.Dock="Left"
                Command="{Binding Path=TestTaskAsyncCommand}"
                >
                <!--Command="{Binding Path=TestTaskAsyncCommand}"
                ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Decoration.Description}"-->
                <Button.Content>
                    <StackPanel Orientation="Horizontal">
                        <!--<Viewbox Margin="0,0,5,0"
                            Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button, AncestorLevel=1}, Path=Command.IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}"
                            >
                            <Cinch:CircularProgressBar />
                        </Viewbox>-->
                        <Rectangle Stretch="UniformToFill" Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button, AncestorLevel=1}, Path=Command.Decoration.IconBrush}" />
                        <TextBlock 
                            Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button, AncestorLevel=1}, Path=Command.Decoration.Caption}"
                            TextWrapping="Wrap"
                            Margin="10,0,0,0"
                            VerticalAlignment="Center"
                            />
                    </StackPanel>
                </Button.Content>
            </Button>
            
            <!--<Button Name="Button2" Content="{StaticResource Power1_IconRectangle}" Margin="10" Height="35" Width="35" Padding="1" IsEnabled="True" />
            <ContentControl Content="{StaticResource Power2_IconRectangle}" Margin="10" Height="35" Width="35" />-->
            
            <!--<HeaderedContentControl Content="{StaticResource Power2_IconRectangle}" Margin="10" Width="35" Header="Key" HeaderTemplate="{StaticResource IconHeaderTemplate}" />-->
            <!--<HeaderedContentControl  Content="{Binding Source={x:Static RstyxResources:UIResources.IconRectangles}, Path=Item[Power2_IconRectangle]}" Margin="10" Width="35" Header="Key" HeaderTemplate="{StaticResource IconHeaderTemplate}" />-->
            <!--<HeaderedContentControl  Content="{Binding Source={x:Static RstyxResources:UIResources.IconRectangles}, Path=[Power2_IconRectangle]}" Margin="10" Width="35" Header="Key" HeaderTemplate="{StaticResource IconHeaderTemplate}" />-->
            
            <!--<HeaderedContentControl  Content="{Binding Source={x:Static RstyxResources:UIResources}, Path=IconRectangles[Power2_IconRectangle]}" Margin="10" Width="35" Header="Key" HeaderTemplate="{StaticResource IconHeaderTemplate}" />-->
            
            <StackPanel>
                <RstyxControls:FileChooser 
                    Name="FileChoser1" 
                    FontSize="15" 
                    DockPanel.Dock="Bottom" 
                    Margin="3" 
                    TabIndex="11"
                    InputFilePath="X:\Quellen\DotNet\VisualBasic\Rstyx.Utilities\TestWpf\source\Beispiel.kf"
                    ChangesWorkingDir="true"
                    Watermark="Wasserzeichen"
                    >
                    <RstyxPush:PushBindingManager.PushBindings>
                        <RstyxPush:PushBinding TargetProperty="FilePath" Path="FilePath1" />
                    </RstyxPush:PushBindingManager.PushBindings>
                </RstyxControls:FileChooser>
                
                <!-- FileChooser 2 -->
                <DockPanel>
                    <Label Target="{Binding ElementName=FileChoser2}" Content="_FileChooser"/>
                    <RstyxControls:FileChooser 
                        Name="FileChoser2"
                        FileMode="OpenOrCreate" 
                        DockPanel.Dock="Bottom" 
                        Margin="3" 
                        TabIndex="12"
                        InputFilePath="{Binding ElementName=tbTest, Path=Text, Mode=TwoWay}"
                        DefaultDirectory="T:\"
                        FileFilter = "txt files (*.txt)|*.txt|All files (*.*)|*.*"
                        Watermark="Wasser Wasser Wasser"
                        />
                </DockPanel>
                
                <DockPanel>
                    <Label Target="{Binding ElementName=tbTest}" Content="_Test"/>
                    <TextBox
                        Name="tbTest"
                        Text="{Binding Path=Textbox, Mode=TwoWay}"
                        />
                        <!--Text="{Binding Path=Textbox, Mode=TwoWay, Converter={x:Static RstyxConverters:ConverterProvider.DebugConverter}}"-->
                </DockPanel>
                
            </StackPanel>
        </DockPanel>
        
        <!-- Test CheckBoxes -->
        <DockPanel Grid.Row="1" Margin="5">
            <!--<CheckBox Content=" activate error view on error" Margin="10,3,0,0" IsChecked="{Binding Source={x:Static Logging:LogBox.Instance}, Path=Console.activateErrorViewOnError, Converter={x:Static Logging:WpfUtils.CheckboxConverter}}" />
            <CheckBox Content=" Built-in window is modal"     Margin="30,3,0,0" IsChecked="{Binding Source={x:Static Logging:LogBox.Instance}, Path=isStandaloneConsoleModal, Converter={x:Static Logging:WpfUtils.CheckboxConverter}}" />-->
            
            <!--<Viewbox  Width="15" Height="15" Margin="10" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Cinch:CircularProgressBar />
            </Viewbox>-->
            
            <RstyxControls:EditorSelector Name="EditorCombo2" />
            
            <RstyxControls:RadioButtonList
                Name="TestRadioButtonList" ItemsSource="{Binding Source={x:Static RstyxUtilsApps:AppUtils.AvailableEditors}, Mode=OneWay}"
                DisplayMemberPath="Value.DisplayName"
                SelectedValuePath="Key" 
                DockPanel.Dock="Left" Margin="5" >
                <!--SelectedValue="{Binding Path=MetaData.SiteDataPool.ActiveSiteID, Mode=TwoWay}"
                SelectedValuePath="[Key]"
                IsSynchronizedWithCurrentItem="true"-->
            </RstyxControls:RadioButtonList>
            
            <DockPanel DockPanel.Dock="Right">
                    <!--<TextBlock
                        TextWrapping="Wrap"
                        Text="Jedes Modell der Zeichnungsdatei kann einen Satz Projektdaten speichern."
                        Name="tb1"
                        />-->
                    <!--<Label Content="{Binding ElementName=FileChoser2, Path=FilePath, Mode=OneWay}" />
                    <Label Content="{Binding ElementName=TestRadioButtonList, Path=SelectedValue, Mode=OneWay}" />-->
                    <StackPanel Orientation="Horizontal" Grid.Row="1" Margin="5">
                        <TextBlock Text="" />
                        <TextBlock Text="" Margin="11,0,0,0"/>
                    </StackPanel>
                    
                    <ToggleButton
                        Height="40"
                        Width="40"
                        Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                        >
                        TB
                        <!--Template="{StaticResource SimpleExpanderButtonTemp}"
                        OverridesDefaultStyle="False"-->
                    </ToggleButton>
                    
                    <!--<StackPanel>
                    <RstyxControls:LooseExpanderToggle
                        Name="TestToggle"
                        ExpandDirection="Right"
                        Target="ToolBar1"
                        >
                    </RstyxControls:LooseExpanderToggle>
                    </StackPanel>-->
                    
                    <ToolBar Height="37" Name="ToolBar1" Width="164" Visibility="Hidden" >
                        <Button Content="Button" Width="50"/>
                        <ToggleButton Content="TB"/>
                    </ToolBar>
                
                <!--xmlns:Ribbon="http://schemas.microsoft.com/winfx/2006/xaml/presentation/ribbon"-->
                <!--<Ribbon:RibbonToggleButton Height="28" Name="RibbonToggleButton1" Width="38" Content="RTB" IsChecked="True" />-->
            </DockPanel>
            
            
            <DockPanel>
                <Label Target="{Binding ElementName=ValidatingTextBox1}" Content="Test Double"/>
                <TextBox
                    Name="ValidatingTextBox1"
                    Text="{Binding Path=ValidatingProperty1, Mode=TwoWay, StringFormat=\{0:0.0\}, NotifyOnValidationError=True, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"
                    Width="100"
                    />
                    <!--Text="{Binding Path=ValidatingProperty, Mode=TwoWay, StringFormat=\{0:0.0\}, NotifyOnValidationError=True, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged"-->
                    <!--Text="{Binding Path=Textbox, Mode=TwoWay, Converter={x:Static RstyxConverters:ConverterProvider.DebugConverter}}"-->
                    
                <Label Target="{Binding ElementName=ValidatingTextBox2}" Content="Test Kilometer"/>
                <TextBox
                    Name="ValidatingTextBox2"
                    Text="{Binding ValidatingProperty2, Mode=TwoWay, NotifyOnValidationError=True, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True, ValidatesOnExceptions=True}"
                    />
            </DockPanel>
        </DockPanel>
        
        <DockPanel Grid.Row="2">
            <!--<Expander DockPanel.Dock="Top" Name="LoggingConsolePanel" Header="Protokoll" Margin="3" IsExpanded="True" MaxHeight="250">-->
                <Logging:ConsoleView DockPanel.Dock="Top" />
            <!--</Expander>-->
            
            <Expander Name="IconsPanel" Header="Icon Galerie" Margin="3" IsExpanded="True">
                <RstyxControls:AvailableIcons />
            </Expander>
        </DockPanel>
        
        <StatusBar Grid.Row="3" >
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="0">
                <TextBlock Text="{Binding Path=StatusText, Mode=OneWay}" />
            </StatusBarItem>
            
            <!-- Progress Bar -->
            <StatusBarItem Grid.Column="1"
                Padding="3,0,3,3"
                >
                <ProgressBar Value="30" Width="130" Height="18"/>
                <!--<ViewBox><ProgressBar Value="30" Width="130" /></ViewBox>-->
            </StatusBarItem>
            
            <StatusBarItem Grid.Column="2">
                <TextBlock>Set</TextBlock>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>

<!-- for jEdit:  :collapseFolds=2::tabSize=4::indentSize=4:-->
