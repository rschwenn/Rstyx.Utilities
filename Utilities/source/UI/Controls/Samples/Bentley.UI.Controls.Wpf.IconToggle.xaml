<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    $Source: ui/Bentley.UI/Controls/Wpf/IconToggle.xaml $

 $Copyright: (c) 2011 Bentley Systems, Incorporated. All rights reserved. $

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<ResourceDictionary
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:BuiWpf="clr-namespace:Bentley.UI.Controls.Wpf;assembly=Bentley.UI"
        xmlns:BuiDrawing="clr-namespace:Bentley.UI.Drawing;assembly=Bentley.UI"
    >
    <BuiWpf:AdvancedLogicValueConverter x:Key="advancedLogicValueConverter" />
    <BuiWpf:IsEffectivelyToggledConverter x:Key="isEffectivelyToggledConverter" />
    <BuiDrawing:DisabledBitmapEffect x:Key="disabledBitmapEffect" />
    <BuiDrawing:DarkGrayBitmapEffect x:Key="darkGrayBitmapEffect" />

    <Style TargetType="{x:Type BuiWpf:IconToggle}">
        <Setter Property="Foreground"       Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"   />
        <Setter Property="Background"       Value="Transparent"                                                     />
        <Setter Property="BorderThickness"  Value="0.0"                                                             />
        <Setter Property="BorderBrush"      Value="Transparent"                                                     />
        <Setter Property="Margin"           Value="0.0"                                                             />
        <Setter Property="Focusable"        Value="False"                                                           />

        <!--
        The overall structure of this control is have one button with an overridden template to show a border.
        -->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type BuiWpf:IconToggle}">
                    <Button Name="m_button" Command="{x:Static BuiWpf:IconToggle.ClickCommand}" Margin="0.0" Padding="2.0" Background="Transparent" BorderBrush="Transparent" BorderThickness="1.0" IsTabStop="{TemplateBinding IsTabStop}" SnapsToDevicePixels="True">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Border Name="m_buttonBorder" Margin="0.0" Padding="2.0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                                    <ContentPresenter SnapsToDevicePixels="True" />
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                        <Button.Content>
                            <StackPanel Orientation="Horizontal" Margin="0.0" SnapsToDevicePixels="True">
                                <Image Name="m_image" Margin="0.0" Source="{TemplateBinding ButtonImage}" />
                                <TextBlock Name="m_text" Margin="0.0" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" Text="{TemplateBinding ButtonText}" SnapsToDevicePixels="True" />
                            </StackPanel>
                        </Button.Content>
                    </Button>

                    <ControlTemplate.Triggers>
                        <!-- Need to add extra padding if the control actually has text. -->
                        <Trigger Property="HasText" Value="True">
                            <Setter TargetName="m_image" Property="Margin" Value="0.0, 0.0, 2.0, 0.0" />
                            <Setter TargetName="m_text" Property="Margin" Value="0.0, 0.0, 2.0, 0.0" />
                        </Trigger>

                        <!-- Different stroke/fill if toggled (and enabled). -->
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource advancedLogicValueConverter}" ConverterParameter="and">
                                    <Binding RelativeSource="{x:Static RelativeSource.Self}" Path="IsEnabled" />
                                    <Binding RelativeSource="{x:Static RelativeSource.Self}" Path="ToggleState" Converter="{StaticResource isEffectivelyToggledConverter}" />
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="m_button" Property="BorderBrush" Value="{DynamicResource {x:Static BuiWpf:BentleyColorsResourceDictionary.ButtonCheckedStrokeBrushKey}}" />
                            <Setter TargetName="m_button" Property="Background" Value="{DynamicResource {x:Static BuiWpf:BentleyColorsResourceDictionary.ButtonCheckedFillBrushKey}}" />
                        </DataTrigger>
                        
                        <!-- Simple mouse hover (state is not toggled). -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="ToggleState" Value="Off" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="m_button" Property="BorderBrush" Value="{DynamicResource {x:Static BuiWpf:BentleyColorsResourceDictionary.ButtonSelectedStrokeBrushKey}}" />
                            <Setter TargetName="m_button" Property="Background" Value="{DynamicResource {x:Static BuiWpf:BentleyColorsResourceDictionary.ButtonSelectedFillBrushKey}}" />
                        </MultiTrigger>

                        <!-- Mouse re-hover (state is toggled). -->
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource advancedLogicValueConverter}" ConverterParameter="and">
                                    <Binding RelativeSource="{x:Static RelativeSource.Self}" Path="IsMouseOver" />
                                    <Binding RelativeSource="{x:Static RelativeSource.Self}" Path="ToggleState" Converter="{StaticResource isEffectivelyToggledConverter}" />
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="m_button" Property="BorderBrush" Value="{DynamicResource {x:Static BuiWpf:BentleyColorsResourceDictionary.ButtonSelectedStrokeBrushKey}}" />
                            <Setter TargetName="m_button" Property="Background" Value="{DynamicResource {x:Static BuiWpf:BentleyColorsResourceDictionary.ButtonPressedFillBrushKey}}" />
                        </DataTrigger>
                        
                        <!-- Pressed drawing is regardless of current toggle state. -->
                        <Trigger SourceName="m_button" Property="IsPressed" Value="True">
                            <Setter TargetName="m_button" Property="BorderBrush" Value="{DynamicResource {x:Static BuiWpf:BentleyColorsResourceDictionary.ButtonPressedStrokeBrushKey}}" />
                            <Setter TargetName="m_button" Property="Background" Value="{DynamicResource {x:Static BuiWpf:BentleyColorsResourceDictionary.ButtonPressedFillBrushKey}}" />
                        </Trigger>
                        
                        <!-- Different image effect if mixed. -->
                        <Trigger Property="ToggleState" Value="Mixed">
                            <Setter TargetName="m_image" Property="Effect" Value="{StaticResource darkGrayBitmapEffect}" />
                        </Trigger>

                        <!-- Different image effect if disabled (wins over mixed; not sure how to combine anyway). -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="m_image" Property="Effect" Value="{StaticResource disabledBitmapEffect}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>
